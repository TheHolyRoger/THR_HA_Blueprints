# Blueprint metadata
blueprint:
  name: Controller - Philips Hue Smart Button
  description: |
    # Controller - Philips Hue Smart button with multiple presses
  domain: automation
  input:
    controller_device:
      name: (HUE & ZHA) Button Device
      description: The button device to use for the automation (do not fill if using Zigbee2MQTT).
      default: ""
      selector:
        device:
          entity:
            - domain: sensor
              device_class: battery
              integration: hue
            - domain: sensor
              device_class: battery
              integration: zha
          filter:
            - integration: hue
              manufacturer: "Signify Netherlands B.V."
              model: "Hue Smart button (ROM001)"
            - integration: zha
              manufacturer: "Signify Netherlands B.V."
              model: "ROM001"
    controller_topic:
      name: (Zigbee2MQTT) Button `/action` Topic
      description: The MQTT topic to use for the automation (only fill if using Zigbee2MQTT)
      default: ""
      selector:
        text:
    helper_last_controller_event:
      name: (Required) Helper - Input Text
      description: Input Text used to store the last event fired by the controller. You will need to manually create a text input entity for this, please read the blueprint Additional Notes for more info.
      default: ""
      selector:
        entity:
          filter:
            domain: input_text
    hold_to_dim_entity:
      name: (Optional) Toggle/Dim Light Entity
      description: Light entity to be dimmed when holding or toggled on first press as configured below.
      default: ""
      selector:
        entity:
          filter:
            domain: light
    scene_first_release: &scene-selector
      name: (Optional) First Press/Release Scene
      description: Select a scene to be activated on the first button press/release.
      default: ""
      selector:
        entity:
          filter:
            - domain: scene
    scene_second_release:
      <<: *scene-selector
      name: (Optional) Second Press/Release Scene
      description: Select a scene to be activated on the second button press/release.
    scene_third_release:
      <<: *scene-selector
      name: (Optional) Third Press/Release Scene
      description: Select a scene to be activated on the third button press/release.
    scene_fourth_release:
      <<: *scene-selector
      name: (Optional) Fourth Press/Release Scene
      description: Select a scene to be activated on the fourth button press/release.
    scene_fifth_release:
      <<: *scene-selector
      name: (Optional) Fifth Press/Release Scene
      description: Select a scene to be activated on the fifth button press/release.
    button_toggle_dim_entity_first_press:
      name: (Optional) Enable Toggle Light on First Press
      description: Enable or disable the behaviour of toggling the Toggle/Dim Light Entity on first press.
      default: true
      selector:
        boolean:
    button_hold_to_dim:
      name: (Optional) Enable Hold to Dim
      description: Enable the hold to dim action - requires the Toggle/Dim Light Entity to be set.
      default: true
      selector:
        boolean:
    button_multi_press_enabled:
      name: (Optional) Enable button multi press events
      description: Choose whether or not to enable the virtual multi press events for the button. Leave this on if you are providing actions for the button double/triple/quadruple/quintuple press events.
      default: true
      selector:
        boolean:
    # inputs for custom actions
    action_button_short_release: &action-selector
      name: (Optional) Short button press release. (First)
      description: >-
        Action to run on short button press release.
        There is no need to use this action if using the light toggle options unless you want to activate a particular scene.
      default: []
      selector:
        action:
    action_button_double_press:
      <<: *action-selector
      name: (Optional) Button double press
      description: Action to run on the release of a double button press.
    action_button_triple_press:
      <<: *action-selector
      name: (Optional) Button triple press
      description: Action to run on the release of a triple button press.
    action_button_quadruple_press:
      <<: *action-selector
      name: (Optional) Button quadruple press
      description: Action to run on the release of a quadruple button press.
    action_button_quintuple_press:
      <<: *action-selector
      name: (Optional) Button quintuple press
      description: Action to run on the release of a quintuple button press.
    action_button_long_repeat:
      <<: *action-selector
      name: (ADVANCED) Button long hold
      description: >-
        Action to run on long button hold - this is fired every second the button is held down.
        (There is no need to use this action if using hold to dim options below.)
    action_button_long_release:
      <<: *action-selector
      name: (ADVANCED) Long button press release
      description: Action to run on button release after long press.
    action_button_initial_press:
      <<: *action-selector
      name: (ADVANCED) Button initial press
      description: Action to run on initial short button press. This is run on every single button press.
    # helpers used to properly recognize the remote button events
    helper_multi_press_delay:
      name: (ADVANCED) Multi Press Window
      description: Max time window between button presses for multi-press events. Increase this value if multi-press actions aren't recognised, decrease it if they're recognised too much.
      default: 2500
      selector:
        number:
          min: 1000
          max: 43200000
          unit_of_measurement: milliseconds
          mode: box
          step: 10
    hold_to_dim_brightness_step:
      name: (ADVANCED) Dimming Brightness Step
      description: The value to increment/decrement brightness by whilst holding.
      default: 60
      selector:
        number:
          min: 1
          max: 255
          mode: slider
          step: 1
    hold_to_dim_direction_down:
      name: (ADVANCED) Initially Dim Light Down
      description: >-
        Enable initially dimming the light down on hold.
        Without enabling this the light will get brighter when you first hold the button.
      default: true
      selector:
        boolean:
    toggle_dim_entity_brightness:
      name: (ADVANCED) First Press Toggle Brightness %
      description: The Brightness % to set the Toggle/Dim Light Entity to when turning on with a first press toggle. (0 uses the previous brightness)
      default: 0
      selector:
        number:
          min: 0
          max: 100
          mode: slider
          step: 1
    # inputs for looping custom actions on long button press events until the corresponding release event is received
    button_long_repeat_loop:
      name: (ADVANCED) Button long press - loop actions
      description: >-
        Loop the button action until the button is released (it will be called every second without this).
        (There is no need to use this action if using hold to dim options below.)
      default: false
      selector:
        boolean:
    button_long_repeat_max_loop_repeats:
      name: (ADVANCED) Button long press - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
        (There is no need to use this action if using hold to dim options below.)
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    button_multi_press_always_fire_first_release:
      name: (ADVANCED) Always fire first short button release
      description: Choose whether or not to always fire the first short button release action without waiting for the Multi Press delay.
      default: true
      selector:
        boolean:
    action_repeat_on_press_count:
      name: (ADVANCED) Repeat actions on multi-presses
      description: >-
        Repeats actions X times, on each press after the first.
        Useful for scene actions to account for device delays to ensure the final press is activated.
      default: 3
      selector:
        number:
          min: 0
          max: 5
          unit_of_measurement: repetitions
          mode: slider
          step: 1
    delay_between_action_repeats: &millisecond-selector
      name: (ADVANCED) Delay between multi-press action repititions
      description: If you have issues with the multi-press action repititions try increasing this a bit.
      default: 600
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: milliseconds
          mode: box
          step: 1
    helper_debounce_delay:
      <<: *millisecond-selector
      name: (ADVANCED) Internal Debounce Delay
      description: By default you should probably leave this at 0, but you might need to increase it in certain situations.
      default: 0
# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  button_multi_press_enabled: !input button_multi_press_enabled
  button_multi_press_always_fire_first_release: !input button_multi_press_always_fire_first_release
  button_long_repeat_loop: !input button_long_repeat_loop
  button_long_repeat_max_loop_repeats: !input button_long_repeat_max_loop_repeats
  helper_last_controller_event: !input helper_last_controller_event
  helper_multi_press_delay: !input helper_multi_press_delay
  button_hold_to_dim: !input button_hold_to_dim
  button_toggle_dim_entity_first_press: !input button_toggle_dim_entity_first_press
  toggle_dim_entity_brightness: !input toggle_dim_entity_brightness
  hold_to_dim_entity: !input hold_to_dim_entity
  hold_to_dim_brightness_step: !input hold_to_dim_brightness_step
  hold_to_dim_direction_down: !input hold_to_dim_direction_down
  helper_debounce_delay: !input helper_debounce_delay
  delay_between_action_repeats: !input delay_between_action_repeats
  action_repeat_on_press_count: !input action_repeat_on_press_count
  single_release_action: !input action_button_short_release
  double_release_action: !input action_button_double_press
  triple_release_action: !input action_button_triple_press
  quadruple_release_action: !input action_button_quadruple_press
  quintuple_release_action: !input action_button_quintuple_press
  scene_first_release: !input scene_first_release
  scene_second_release: !input scene_second_release
  scene_third_release: !input scene_third_release
  scene_fourth_release: !input scene_fourth_release
  scene_fifth_release: !input scene_fifth_release
  # adjusted debounce delay so that the resulting multi press delay is exactly as specified by the user when running the action, taking also account of debouncing
  # make sure it never goes below the minimum multi press delay
  adjusted_multi_press_delay: "{{ [helper_multi_press_delay - helper_debounce_delay, 100] | max }}"
  # mapping between actions and integrations
  button_initial_press: [initial_press, on_press, press]
  button_short_release: [short_release, on_short_release, release]
  button_long_repeat: [repeat, on_hold, hold]
  button_long_release: [long_release, on_long_release, release]
  # build data to send within a controller event
  controller_topic: !input controller_topic
  controller_topic_internal: >-
    {% if controller_topic|length > 0 %}
    {{ controller_topic }}
    {% else %}
    {{ "empty_mqtt_topic_unused" }}
    {% endif %}
  controller_device: !input controller_device
  controller_id: >-
    {% if controller_topic|length > 0 %}
    {{ controller_topic }}
    {% else %}
    {{controller_device}}
    {% endif %}
  is_z2m: >-
    {{ (controller_topic|length > 0) }}
  action_repeat_on_press: "{{ action_repeat_on_press_count > 0 }}"
trigger_variables:
  controller_topic: !input controller_topic
  controller_topic_internal: >-
    {% if controller_topic|length > 0 %}
    {{ controller_topic }}
    {% else %}
    {{ "empty_mqtt_topic_unused" }}
    {% endif %}
  initial_press_action: !input action_button_initial_press
  hue_press_trigger: "{{ 'initial_press' if initial_press_action|length else 'ignore_press' }}"
  zha_press_trigger: "{{ 'on_press' if initial_press_action|length else 'ignore_on_press' }}"
  z2m_press_trigger: "{{ 'press' if initial_press_action|length else 'ignore_press' }}"
mode: restart
max_exceeded: silent
trigger:
  - platform: event
    event_type:
      - hue_event
    event_data:
      device_id: !input controller_device
      command: "{{ hue_press_trigger }}"
  - platform: event
    event_type:
      - hue_event
    event_data:
      device_id: !input controller_device
      command: short_release
  - platform: event
    event_type:
      - hue_event
    event_data:
      device_id: !input controller_device
      command: repeat
  - platform: event
    event_type:
      - hue_event
    event_data:
      device_id: !input controller_device
      command: long_release
  - platform: event
    event_type:
      - zha_event
    event_data:
      device_id: !input controller_device
      command: "{{ zha_press_trigger }}"
  - platform: event
    event_type:
      - zha_event
    event_data:
      device_id: !input controller_device
      command: on_short_release
  - platform: event
    event_type:
      - zha_event
    event_data:
      device_id: !input controller_device
      command: on_hold
  - platform: event
    event_type:
      - zha_event
    event_data:
      device_id: !input controller_device
      command: on_long_release
  - platform: mqtt
    topic: "{{ controller_topic_internal }}"
    payload: "{{ z2m_press_trigger }}"
  - platform: mqtt
    topic: "{{ controller_topic_internal }}"
    payload: release
  - platform: mqtt
    topic: "{{ controller_topic_internal }}"
    payload: hold
condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - condition: template
        value_template: >-
          {%- set trigger_action -%}
          {% if "payload" in trigger %}
          {{ trigger.payload }}
          {% elif "type" in trigger.event.data %}
          {{ trigger.event.data.type }}
          {% else %}
          {{ trigger.event.data.command }}
          {% endif %}
          {%- endset -%}
          {{ trigger_action not in ["","None"] }}
action:
  # Check config
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ (helper_last_controller_event | length < 1) or state_attr(helper_last_controller_event, 'max') < 500 }}
        sequence:
          - service: persistent_notification.create
            data:
              message: >-
                Invalid Config: "Helper - Last Controller Event" is not set or too short.
                Set max length to 500 or more.
              title: Philips Hue Smart Button
      - conditions:
          - condition: template
            value_template: >-
              {{ is_z2m and ((controller_device | length) > 0) }}
        sequence:
          - service: persistent_notification.create
            data:
              message: >-
                Invalid Config: Cannot have both MQTT topic and Controller Device set.
              title: Philips Hue Smart Button
    default:
      # debouncing - when automation is triggered multiple times, the last automation run is the one which completes execution, due to mode restart
      # therefore previous runs must wait for the debounce delay before executing any other action
      # if the delay expires and the automation is still running it means it's the last run and execution can continue
      - delay:
          milliseconds: "{{ helper_debounce_delay }}"
      # extract button event from the trigger
      # provide a single string value to check against
      - variables:
          trigger_action: >-
            {% if "payload" in trigger %}
            {{ trigger.payload }}
            {% elif "type" in trigger.event.data %}
            {{ trigger.event.data.type }}
            {% else %}
            {{ trigger.event.data.command }}
            {% endif %}
          helper_valid: '{{ helper_last_controller_event is not none and (states(helper_last_controller_event)|length) and (states(helper_last_controller_event) | regex_match("^\{(\".*\":[ ]?\".*\"(,[ ]?)?)*\}$")) }}'
          helper_state: "{{ states(helper_last_controller_event) }}"
          trigger_delta: >-
            {% if helper_valid %}
            {% set trig_time = helper_state.last_triggered %}
            {% else %}
            {% set trig_time = "1970-01-01 00:00:00" %}
            {% endif %}
            {{ (as_timestamp(now()) - as_timestamp(trig_time)) * 1000 }}
          default_dim_direction: >-
            {{ "down" if hold_to_dim_direction_down else "up" }}
          last_dim_direction: >-
            {% if helper_valid and "last_dim_direction" in helper_state and trigger_delta | int <= ((helper_multi_press_delay | int) * 2) %}
            {{ helper_state.last_dim_direction }}
            {% else %}
            {{ default_dim_direction }}
            {% endif %}
          last_trigger_action: >-
            {% if helper_valid and "trigger_action" in helper_state %}
            {{ helper_state.trigger_action }}
            {% else %}
            {{ "None" }}
            {% endif %}
      # choose the sequence to run based on the received button event
      - choose:
          - conditions:
              - condition: template
                value_template: >-
                  {{ trigger_action | string in button_initial_press }}
            sequence:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: button_initial_press
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_initial_press
          - conditions:
              - condition: template
                value_template: >-
                  {{ trigger_action | string in button_short_release }}
              - condition: template
                value_template: >-
                  {{ not is_z2m or (last_trigger_action | string not in button_long_repeat) }}
            sequence:
              - choose:
                  # if multi press events are enabled
                  - conditions:
                      - condition: template
                        value_template: >-
                          {{ button_multi_press_enabled }}
                    sequence:
                      - choose:
                          # if previous event was a short press
                          - conditions:
                              - condition: template
                                value_template: >-
                                  {{ trigger_action | string == helper_state.trigger_action and trigger_delta | int <= helper_multi_press_delay | int }}
                              - condition: template
                                value_template: >-
                                  {{ scene_second_release|length > 0 or double_release_action|length > 0 }}
                            sequence:
                              # store the double press event in the last controller event helper
                              - service: input_text.set_value
                                data:
                                  entity_id: !input helper_last_controller_event
                                  value: '{{ {"trigger_action":"double_press","last_triggered":now() | string,"last_dim_direction":last_dim_direction} | to_json }}'
                              # run the double press action
                              # fire the event
                              - event: ahb_controller_event
                                event_data:
                                  controller: "{{ controller_id }}"
                                  action: button_double_press
                              # run the custom action
                              - repeat:
                                  count: "{{action_repeat_on_press_count}}"
                                  sequence:
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ scene_second_release|length > 0 }}
                                          sequence:
                                            - service: scene.turn_on
                                              target:
                                                entity_id: "{{ scene_second_release }}"
                                              metadata: {}
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ double_release_action|length > 0 }}
                                          sequence: !input action_button_double_press
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ action_repeat_on_press }}
                                          sequence:
                                            - delay:
                                                milliseconds: "{{ delay_between_action_repeats }}"
                          - conditions:
                              - condition: template
                                value_template: >-
                                  {{ "double_press" == helper_state.trigger_action and trigger_delta | int <= helper_multi_press_delay | int }}
                              - condition: template
                                value_template: >-
                                  {{ scene_third_release|length > 0 or triple_release_action|length > 0 }}
                            sequence:
                              # store the triple press event in the last controller event helper
                              - service: input_text.set_value
                                data:
                                  entity_id: !input helper_last_controller_event
                                  value: '{{ {"trigger_action":"triple_press","last_triggered":now() | string,"last_dim_direction":last_dim_direction} | to_json }}'
                              # run the triple press action
                              # fire the event
                              - event: ahb_controller_event
                                event_data:
                                  controller: "{{ controller_id }}"
                                  action: button_triple_press
                              # run the custom action
                              - repeat:
                                  count: "{{action_repeat_on_press_count}}"
                                  sequence:
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ scene_third_release|length > 0 }}
                                          sequence:
                                            - service: scene.turn_on
                                              target:
                                                entity_id: "{{ scene_third_release }}"
                                              metadata: {}
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ triple_release_action|length > 0 }}
                                          sequence: !input action_button_triple_press
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ action_repeat_on_press }}
                                          sequence:
                                            - delay:
                                                milliseconds: "{{ delay_between_action_repeats }}"
                          - conditions:
                              - condition: template
                                value_template: >-
                                  {{ "triple_press" == helper_state.trigger_action and trigger_delta | int <= helper_multi_press_delay | int }}
                              - condition: template
                                value_template: >-
                                  {{ scene_fourth_release|length > 0 or quadruple_release_action|length > 0 }}
                            sequence:
                              # store the quadruple press event in the last controller event helper
                              - service: input_text.set_value
                                data:
                                  entity_id: !input helper_last_controller_event
                                  value: '{{ {"trigger_action":"quadruple_press","last_triggered":now() | string,"last_dim_direction":last_dim_direction} | to_json }}'
                              # run the quadruple press action
                              # fire the event
                              - event: ahb_controller_event
                                event_data:
                                  controller: "{{ controller_id }}"
                                  action: button_quadruple_press
                              # run the custom action
                              - repeat:
                                  count: "{{action_repeat_on_press_count}}"
                                  sequence:
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ scene_fourth_release|length > 0 }}
                                          sequence:
                                            - service: scene.turn_on
                                              target:
                                                entity_id: "{{ scene_fourth_release }}"
                                              metadata: {}
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ quadruple_release_action|length > 0 }}
                                          sequence: !input action_button_quadruple_press
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ action_repeat_on_press }}
                                          sequence:
                                            - delay:
                                                milliseconds: "{{ delay_between_action_repeats }}"
                          - conditions:
                              - condition: template
                                value_template: >-
                                  {{ "quadruple_press" == helper_state.trigger_action and trigger_delta | int <= helper_multi_press_delay | int }}
                              - condition: template
                                value_template: >-
                                  {{ scene_fifth_release|length > 0 or quintuple_release_action|length > 0 }}
                            sequence:
                              # store the quintuple press event in the last controller event helper
                              - service: input_text.set_value
                                data:
                                  entity_id: !input helper_last_controller_event
                                  value: '{{ {"trigger_action":"quintuple_press","last_triggered":now() | string,"last_dim_direction":last_dim_direction} | to_json }}'
                              # run the quintuple press action
                              # fire the event
                              - event: ahb_controller_event
                                event_data:
                                  controller: "{{ controller_id }}"
                                  action: button_quintuple_press
                              # run the custom action
                              - repeat:
                                  count: "{{action_repeat_on_press_count}}"
                                  sequence:
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ scene_fifth_release|length > 0 }}
                                          sequence:
                                            - service: scene.turn_on
                                              target:
                                                entity_id: "{{ scene_fifth_release }}"
                                              metadata: {}
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ quintuple_release_action|length > 0 }}
                                          sequence: !input action_button_quintuple_press
                                    - choose:
                                        - conditions:
                                            - condition: template
                                              value_template: >-
                                                {{ action_repeat_on_press }}
                                          sequence:
                                            - delay:
                                                milliseconds: "{{ delay_between_action_repeats }}"
                        # previous event was not a short press
                        default:
                          # update helper
                          - &inputtext-set-default
                            service: input_text.set_value
                            data:
                              entity_id: !input helper_last_controller_event
                              value: '{{ {"trigger_action":trigger_action,"last_triggered":now()|string,"last_dim_direction":last_dim_direction} | to_json }}'
                          # Optionally skip delay to always fire the first release
                          - choose:
                              - conditions: "{{ button_multi_press_always_fire_first_release }}"
                                sequence: []
                            default:
                              # wait for the multi press event to occur, within the provided delay
                              # if the second press is received, automation is restarted
                              - delay:
                                  milliseconds: "{{ adjusted_multi_press_delay }}"
                              # if delay expires, no second press was received, therefore run the short press action
                              # run the short press action
                          # fire the event
                          - event: ahb_controller_event
                            event_data:
                              controller: "{{ controller_id }}"
                              action: button_short_release
                          # run the toggle dim entity action
                          - choose: &toggle-dim-entity-actions
                              - conditions:
                                  - "{{ button_toggle_dim_entity_first_press }}"
                                  - "{{ (hold_to_dim_entity | string | length) > 0 }}"
                                sequence:
                                  - choose:
                                      - conditions: >-
                                          {{ expand(hold_to_dim_entity) | selectattr("state", "eq", "on") | list | count > 0 }}
                                        sequence:
                                          - service: input_text.set_value
                                            data:
                                              entity_id: !input helper_last_controller_event
                                              value: ""
                                          - service: light.turn_off
                                            target:
                                              entity_id: "{{ hold_to_dim_entity }}"
                                            data:
                                              transition: 0
                                    default:
                                      - choose: &scene-first-release-action
                                          - conditions: >-
                                              {{ scene_first_release|length > 0 }}
                                            sequence:
                                              - service: scene.turn_on
                                                target:
                                                  entity_id: "{{ scene_first_release }}"
                                                metadata: {}
                                        default:
                                          - service: light.turn_on
                                            target:
                                              entity_id: "{{ hold_to_dim_entity }}"
                                            data: >
                                              {% if (toggle_dim_entity_brightness | int) > 0 %}
                                              {{ {"transition": 0, "brightness_pct": (toggle_dim_entity_brightness | int)} }}
                                              {% else %}
                                              {{ {"transition": 0 } }}
                                              {% endif %}
                                      # run the custom action
                                      - choose: &action-first-release-action
                                          - conditions: >-
                                              {{ single_release_action|length > 0 }}
                                            sequence: !input action_button_short_release
                            default:
                              - choose: *scene-first-release-action
                              # run the custom action
                              - choose: *action-first-release-action
                # if multi press event is disabled run the action for the single short press
                default:
                  # update helper
                  - *inputtext-set-default
                  # fire the event
                  - event: ahb_controller_event
                    event_data:
                      controller: "{{ controller_id }}"
                      action: button_short_release
                  # run the toggle dim entity action
                  - choose: *toggle-dim-entity-actions
          - conditions: "{{ trigger_action | string in button_long_repeat }}"
            sequence:
              # update helper
              - *inputtext-set-default
              # fire the event only once before looping the action
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: button_long_repeat
              - choose:
                  - conditions:
                      - "{{ button_hold_to_dim }}"
                      - "{{ (hold_to_dim_entity | string | length) > 0 }}"
                    sequence:
                      - variables:
                          current_brightness: >-
                            {% set brightness_list=expand(hold_to_dim_entity) | selectattr("state", "eq", "on") | map(attribute='attributes.brightness') | list %}
                            {{ [(((brightness_list | sum) / (brightness_list | length)) if (brightness_list | length) > 0 else 0 | int), 255] | min }}
                      - choose:
                          - conditions: >-
                              {{ (last_dim_direction == "down" and current_brightness > 0) or current_brightness >= 250 }}
                            sequence:
                              - service: light.turn_on
                                data:
                                  brightness_step: "{{ -hold_to_dim_brightness_step }}"
                                target:
                                  entity_id: "{{ hold_to_dim_entity }}"
                              - service: input_text.set_value
                                data:
                                  entity_id: !input helper_last_controller_event
                                  value: '{{ {"trigger_action":trigger_action,"last_triggered":now()|string,"last_dim_direction":"down"} | to_json }}'
                          - conditions: >-
                              {{ current_brightness == 0 }}
                            sequence:
                              - service: light.turn_on
                                data:
                                  brightness: "{{ hold_to_dim_brightness_step }}"
                                target:
                                  entity_id: "{{ hold_to_dim_entity }}"
                              - &inputtext-set-brightness-up
                                service: input_text.set_value
                                data:
                                  entity_id: !input helper_last_controller_event
                                  value: '{{ {"trigger_action":trigger_action,"last_triggered":now()|string,"last_dim_direction":"up"} | to_json }}'
                          - conditions: >-
                              {{ (last_dim_direction == "up" and current_brightness < 255) or current_brightness < 5 }}
                            sequence:
                              - &hold-to-dim-brightness-up
                                service: light.turn_on
                                data:
                                  brightness_step: "{{ hold_to_dim_brightness_step }}"
                                target:
                                  entity_id: "{{ hold_to_dim_entity }}"
                              - *inputtext-set-brightness-up
                        default:
                          - *hold-to-dim-brightness-up
                          - *inputtext-set-brightness-up
              - choose:
                  # if looping is enabled, loop the action for a finite number of iterations
                  - conditions: "{{ button_long_repeat_loop }}"
                    sequence:
                      - repeat:
                          while: "{{ repeat.index < button_long_repeat_max_loop_repeats | int }}"
                          sequence: !input action_button_long_repeat
                # if looping is not enabled run the custom action only once
                default: !input action_button_long_repeat
          - conditions: "{{ trigger_action | string in button_long_release }}"
            sequence:
              # update helper
              - *inputtext-set-default
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: button_long_release
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_long_release
